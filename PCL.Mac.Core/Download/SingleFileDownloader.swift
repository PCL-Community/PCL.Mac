//
//  SingleFileDownloader.swift
//  PCL.Mac
//
//  Created by YiZhiMCQiu on 2025/8/24.
//  Generated by Copilot GPT-5.
//

import Foundation

public class SingleFileDownloader {
    public static func download(
        url: URL,
        destination: URL,
        progress: ((Double) -> Void)? = nil
    ) async throws {
        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        
        let (byteStream, response) = try await URLSession.shared.bytes(for: request)
        
        try? FileManager.default.createDirectory(at: destination.parent(), withIntermediateDirectories: true)
        
        let tempURL = SharedConstants.shared.temperatureURL.appendingPathComponent(UUID().uuidString)
        FileManager.default.createFile(atPath: tempURL.path, contents: nil)
        
        let handle = try FileHandle(forWritingTo: tempURL)
        
        let expectedLength = response.expectedContentLength
        var received: Int64 = 0
        
        var buffer = [UInt8]()
        buffer.reserveCapacity(64 * 1024)
        
        var lastProgressReportTime = CFAbsoluteTimeGetCurrent()
        
        if expectedLength > 0 {
            progress?(0.0)
        } else {
            progress?(-1)
        }
        
        for try await byte in byteStream {
            buffer.append(byte)
            received &+= 1
            
            if buffer.count >= 64 * 1024 {
                try Task.checkCancellation()
                handle.write(Data(buffer))
                buffer.removeAll(keepingCapacity: true)
            }
            
            if expectedLength > 0 {
                let now = CFAbsoluteTimeGetCurrent()
                if now - lastProgressReportTime >= 0.5 {
                    progress?(Double(received) / Double(expectedLength))
                    lastProgressReportTime = now
                }
            }
        }
        
        if !buffer.isEmpty {
            handle.write(Data(buffer))
            buffer.removeAll(keepingCapacity: false)
        }
        
        try FileManager.default.moveItem(at: tempURL, to: destination)
        
        progress?(1.0)
    }
}
